import {
  Injectable,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { UpdateUserDto } from './dto/user.dto';
import { generateJwtToken, verifyJwtToken } from '../../common/utils/jwt.util';
import { sendVerificationEmail } from '../../email/email.service';
import * as bcrypt from 'bcrypt';

@Injectable()
export class UsersService {
  constructor(private readonly prisma: PrismaService) {}

  async findOne(id: string) {
    const user = await this.prisma.user.findUnique({
      where: { id },
    });

    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const { passwordHash, ...userData } = user;
    return userData;
  }

  async findByEmail(email: string) {
    return this.prisma.user.findUnique({
      where: { email },
    });
  }

  async createUser(username: string, email: string, passwordHash: string) {
    return this.prisma.user.create({
      data: {
        username,
        email,
        passwordHash,
        isActive: false, // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
      },
    });
  }

  async update(id: string, data: UpdateUserDto) {
    const { isActive, ...updateData } = data; // –û—Å—Ç–∞–≤–ª—è–µ–º isActive –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ

    const user = await this.prisma.user.update({
      where: { id },
      data: updateData, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫—Ä–æ–º–µ isActive
    });

    if (!user) throw new NotFoundException('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return user;
  }

  async remove(id: string) {
    const user = await this.prisma.user.delete({ where: { id } });
    if (!user) throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' };
  }

  async updateRefreshToken(
    userId: string,
    refreshToken: string,
  ): Promise<void> {
    await this.prisma.user.update({
      where: { id: userId },
      data: { refreshToken },
    });
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
  async sendMagicLink(email: string) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º email
    const user = await this.findByEmail(email);
    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
    const token = generateJwtToken(email);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    const magicLink = `https://ticktask-backend.onrender.com/users/activate/${token}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π
    await sendVerificationEmail(email, 'Your Magic Link', magicLink);

    return { message: 'Verification email sent.' };
  }

  async activateUserByToken(token: string) {
    let email: string;
    try {
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
      console.log('üîë –ü—Ä–∏—à—ë–ª —Ç–æ–∫–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', token);

      // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ email
      email = verifyJwtToken(token);
      console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, email:', email); // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π email
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è
      console.error('‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞:', error.message);
      throw new BadRequestException(
        '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫',
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', email);
    const user = await this.findByEmail(email);
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!user) {
      console.log('‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å
    if (user.isActive) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ...');
    const updatedUser = await this.prisma.user.update({
      where: { email },
      data: { isActive: true },
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', updatedUser); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    return { message: 'User successfully activated', user: updatedUser };
  }

  async findOrCreateGoogleUser(data: {
    googleId: string;
    email: string;
    username: string;
  }): Promise<any> {
    let user = await this.prisma.user.findUnique({
      where: { googleId: data.googleId },
    });

    if (!user) {
      user = await this.prisma.user.create({
        data: {
          googleId: data.googleId,
          email: data.email,
          username: data.username,
        },
      });
    }

    return user;
  }

  async updatePassword(userId: string, newPassword: string) {
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    const updatedUser = await this.prisma.user.update({
      where: { id: userId },
      data: { passwordHash: hashedPassword }, // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    });

    return updatedUser;
  }

  async updatePasswordResetToken(userId: string, resetToken: string) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    const updatedUser = await this.prisma.user.update({
      where: { id: userId },
      data: { passwordResetToken: resetToken }, // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞
    });

    return updatedUser;
  }

  async findByPasswordResetToken(resetToken: string) {
    const user = await this.prisma.user.findFirst({
      where: {
        passwordResetToken: resetToken, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
      },
    });

    if (!user) {
      throw new NotFoundException('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω');
    }

    return user;
  }
}
