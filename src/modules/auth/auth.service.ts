import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { UserWithoutPassword } from '../users/interfaces/user.interface';
import { randomBytes } from 'crypto';
import { PrismaService } from '../../../prisma/prisma.service';
import { sendPasswordResetEmail } from '../../email/email.service';

@Injectable()
export class AuthService {
  constructor(
    private readonly usersService: UsersService,
    private readonly jwtService: JwtService,
    private readonly prismaService: PrismaService,

  ) {}

  async register(
    username: string,
    email: string,
    password: string,
    confirmPassword: string,
  ): Promise<UserWithoutPassword> {
    if (password !== confirmPassword) {
      throw new UnauthorizedException('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    }

    const existingUser = await this.usersService.findByEmail(email);
    if (existingUser) {
      throw new UnauthorizedException(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      );
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await this.usersService.createUser(
      username,
      email,
      hashedPassword,
    );
    const { passwordHash, ...userWithoutPassword } = newUser;
    return userWithoutPassword;
  }

  async login(
    email: string,
    password: string,
  ): Promise<{
    access_token: string;
    refresh_token: string;
    userId: string;
  }> {
    console.log('üì© –ü–æ–ª—É—á–µ–Ω email:', email);

    const user = await this.usersService.findByEmail(email);
    console.log('üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

    if (!user || !user.passwordHash) {
      console.log('‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    const isPasswordValid = await bcrypt.compare(password, user.passwordHash);
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', isPasswordValid);

    if (!isPasswordValid) {
      console.log('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    const payload = { email: user.email, sub: user.id };
    const accessToken = this.jwtService.sign(payload);
    const refreshToken = randomBytes(32).toString('hex');

    await this.usersService.updateRefreshToken(user.id, refreshToken);

    return {
      access_token: accessToken,
      refresh_token: refreshToken,
      userId: user.id,
    };
  }

  async refreshToken(
    userId: string,
    refreshToken: string,
  ): Promise<{ access_token: string }> {
    console.log('üîπ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
    console.log('üëâ userId:', userId);
    console.log('üëâ refreshToken –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', refreshToken);

    const user = await this.usersService.findById(userId);

    console.log('üîπ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? user.id : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üëâ refreshToken –∏–∑ –±–∞–∑—ã:', user?.refreshToken);

    if (!user || user.refreshToken !== refreshToken) {
      console.error('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      throw new UnauthorizedException('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }

    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π access_token');
    const payload = { email: user.email, sub: user.id };
    const accessToken = this.jwtService.sign(payload);

    console.log('‚úÖ –ù–æ–≤—ã–π access_token —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', accessToken);

    return { access_token: accessToken };
  }

  async logout(userId: string): Promise<void> {
    await this.usersService.updateRefreshToken(userId, '');
  }

  async generateJwt(user: UserWithoutPassword): Promise<any> {
    const payload = { sub: user.id, email: user.email };

    return this.jwtService.sign(payload);
  }

  async googleLogin(user: any): Promise<any> {
    return this.usersService.findOrCreateGoogleUser({
      googleId: user.googleId,
      email: user.email,
      username: user.username,
    });
  }
  async requestPasswordReset(email: string): Promise<void> {
    const user = await this.usersService.findByEmail(email);
    if (!user) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    const resetToken = randomBytes(32).toString('hex');
    const resetLink = `http://localhost:3000/reset-password?token=${resetToken}`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.usersService.updatePasswordResetToken(user.id, resetToken);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    await sendPasswordResetEmail(email, '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è', resetLink);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
  async resetPassword(token: string, newPassword: string): Promise<void> {
    const user = await this.usersService.findByPasswordResetToken(token);
    if (!user) {
      throw new BadRequestException('–¢–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫');
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.usersService.updatePassword(user.id, hashedPassword);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞
    await this.usersService.updatePasswordResetToken(user.id, '');
  }

}
