import {
  ApiBody,
  ApiOperation,
  ApiParam,
  ApiProperty,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import {
  Body,
  Controller,
  ForbiddenException,
  Get,
  InternalServerErrorException,
  Param,
  Post,
} from '@nestjs/common';
import { IsInt, IsOptional, Min } from 'class-validator';
import { UserActivityService } from './user-activity.service';
import { JwtAuthDecorator } from '../../common/decorators/jwt.auth.decorator';
import { CurrentUserDecorator } from '../../common/decorators/current-user.decorator';
import { UserActivityDto } from './dto/user-activiti.dto';

// DTO –¥–ª—è body –∑–∞–ø—Ä–æ—Å–∞
class HeartbeatBodyDto {
  @ApiProperty({
    example: 30,
    description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏',
    required: false,
    minimum: 0,
  })
  @IsOptional()
  @IsInt()
  @Min(0)
  secondsToAdd?: number;
}

@ApiTags('Activity')
@Controller('activity')
export class UserActivityController {
  constructor(private readonly activityService: UserActivityService) {}

  @Post(':userId/heartbeat')
  @JwtAuthDecorator() // –∑–∞—â–∏—Ç–∞ JWT
  @ApiOperation({
    summary: '–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (heartbeat)',
    description:
      '–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –æ–±—â–µ–µ –≤—Ä–µ–º—è, streak –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —Ä–∞–∑–±–∏–≤–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏.',
  })
  @ApiParam({
    name: 'userId',
    description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    example: 'user123',
  })
  @ApiBody({
    type: HeartbeatBodyDto,
    description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    examples: {
      withTime: {
        summary: '–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏',
        value: { secondsToAdd: 30 },
      },
      justUpdate: {
        summary: '–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ streak',
        description: '–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ streak –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏',
        value: {},
      },
    },
  })
  @ApiResponse({
    status: 200,
    description: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
    type: UserActivityDto,
    example: {
      totalTimeSpent: 7530,
      totalTimeSpentFormatted: '2 —á–∞—Å–∞ 5 –º–∏–Ω—É—Ç 30 —Å–µ–∫—É–Ω–¥',
      currentStreak: 5,
      longestStreak: 10,
      lastHeartbeat: '2024-01-15T10:30:00.000Z',
      motivationalMessage: {
        emoji: 'üöÄ',
        text: '–ù–∞–±–∏—Ä–∞–µ—Ç–µ –æ–±–æ—Ä–æ—Ç—ã!',
      },
      timeBreakdown: {
        years: 0,
        months: 0,
        days: 0,
        hours: 2,
        minutes: 5,
      },
      totalHours: 2,
      totalMinutes: 125,
    },
  })
  @ApiResponse({
    status: 403,
    description: '–ó–∞–ø—Ä–µ—â–µ–Ω–æ - –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    example: {
      statusCode: 403,
      message: 'Cannot update another user activity',
      error: 'Forbidden',
    },
  })
  @ApiResponse({
    status: 500,
    description: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    example: {
      statusCode: 500,
      message: 'Failed to update activity: User not found',
      error: 'Internal Server Error',
    },
  })
  async heartbeat(
    @Param('userId') userId: string,
    @CurrentUserDecorator() user: { id: string },
    @Body() body: HeartbeatBodyDto,
  ): Promise<UserActivityDto> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (user.id !== userId) {
      throw new ForbiddenException('Cannot update another user activity');
    }

    try {
      return await this.activityService.updateUserActivity(
        userId,
        body.secondsToAdd ?? 0, // –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å
      );
    } catch (error: unknown) {
      if (error instanceof Error) {
        throw new InternalServerErrorException(
          `Failed to update activity: ${error.message}`,
        );
      }
      throw new InternalServerErrorException('Unknown error updating activity');
    }
  }

  @Get('status/:userId')
  @JwtAuthDecorator()
  @ApiOperation({
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description:
      '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é (emoji + —Ç–µ–∫—Å—Ç), —Ç–µ–∫—É—â–∏–π streak –∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.',
  })
  @ApiParam({
    name: 'userId',
    description: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    example: '614e57b4-16f8-49a9-a225-631ffae01370',
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
    type: UserActivityDto, // <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π DTO
  })
  async getUserStatus(
    @CurrentUserDecorator() user: { id: string },
  ): Promise<UserActivityDto> {
    return await this.activityService.getUserActivityStatus(user.id); // activity —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ UserActivityDto
  }
}
