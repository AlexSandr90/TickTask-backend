generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  username            String
  email               String            @unique
  passwordHash        String?
  createdAt           DateTime          @default(now())
  lastLogin           DateTime?
  theme               String            @default("light")
  notifications       Boolean           @default(true)
  refreshToken        String?
  updatedAt           DateTime          @updatedAt
  isActive            Boolean           @default(false)
  googleId            String?           @unique
  passwordResetToken  String?
  avatarPath          String?
  timezone            String            @default("UTC")
  emailChangeToken    String?
  pendingEmail        String?
  currentStreak       Int               @default(0)
  longestStreak       Int               @default(0)
  boards              Board[]
  receivedInvitations BoardInvitation[] @relation("InvitationReceiver")
  sentInvitations     BoardInvitation[] @relation("InvitationSender")
  boardsMembers       BoardMember[]
  Task                Task[]
  UserAchievement     UserAchievement[]
  UserAnalytics       UserAnalytics?
}

model Board {
  id          String            @id @unique @default(uuid())
  title       String
  description String?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  position    Int               @default(0)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations BoardInvitation[]
  members     BoardMember[]
  columns     Column[]
}

model BoardMember {
  id      String    @id @default(uuid())
  boardId String
  userId  String
  role    BoardRole @default(USER)
  addedAt DateTime  @default(now())
  addedBy String?
  board   Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
}

model BoardInvitation {
  id         String           @id @default(uuid())
  boardId    String
  senderId   String
  receiverId String?
  role       BoardRole        @default(USER)
  status     InvitationStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  expiresAt  DateTime?
  token      String?          @unique
  email      String
  board      Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)
  receiver   User?            @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([boardId, email])
}

model Column {
  id        String   @id @unique @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String
  position  Float    @default(0)
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String    @id @unique @default(uuid())
  title       String
  description String?
  columnId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  position    Float     @default(0)
  priority    Int       @default(1)
  tags        String[]
  userId      String?
  deadline    DateTime?
  isCompleted Boolean   @default(false)
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])
}

model UserAnalytics {
  id                  String    @id @default(uuid())
  userId              String    @unique
  totalBoards         Int       @default(0)
  totalColumns        Int       @default(0)
  totalTasks          Int       @default(0)
  completedTasks      Int       @default(0)
  inProgressTasks     Int       @default(0)
  currentStreak       Int       @default(0)
  longestStreak       Int       @default(0)
  totalTimeSpent      BigInt    @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  completedTasksTotal Int       @default(0)
  lastHeartbeat       DateTime?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AchievementDefinition {
  id               String            @id @default(uuid())
  type             String            @unique
  title            String
  description      String
  icon             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String                @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  achievement   AchievementDefinition @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

enum BoardRole {
  OWNER
  ADMIN
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
